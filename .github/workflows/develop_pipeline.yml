name: Develop Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      poetry-cache-hit: ${{ steps.poetry-cache.outputs.cache-hit }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Load cached Poetry installation
      id: poetry-cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pypoetry
          ~/.poetry
          .venv
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry
      run: |
        if [ ! -f "$HOME/.poetry/bin/poetry" ]; then
          curl -sSL https://install.python-poetry.org | python3 -
          echo "export PATH=$HOME/.poetry/bin:$PATH" >> $GITHUB_ENV
        fi
    
    - name: Install dependencies
      if: steps.poetry-cache.outputs.cache-hit != 'true'
      run: |
        poetry install --no-interaction --no-root

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Run linter
      run: poetry run flake8 .

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Run tests
      run: poetry run pytest .

  deploy:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Deploy
      if: success()
      run: echo "Deploying the application..."
