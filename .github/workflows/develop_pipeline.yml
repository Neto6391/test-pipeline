name: Develop Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "POETRY_BIN=$HOME/.poetry/bin/poetry" >> $GITHUB_ENV
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          .venv
          ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Save environment for later jobs
      run: |
        tar -czf env.tar.gz .venv
      continue-on-error: true
      id: save_env
      if: success()
    - uses: actions/upload-artifact@v3
      with:
        name: python-env
        path: env.tar.gz

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    
    - name: Download and extract environment
      uses: actions/download-artifact@v3
      with:
        name: python-env
    - run: |
        tar -xzf env.tar.gz
    
    - name: Run linter
      run: .venv/bin/flake8 .

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4
    
    - name: Download and extract environment
      uses: actions/download-artifact@v3
      with:
        name: python-env
    - run: |
        tar -xzf env.tar.gz
    
    - name: Run tests
      run: .venv/bin/pytest .

  deploy:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Deploy
      if: success()
      run: echo "Deploying the application..."
