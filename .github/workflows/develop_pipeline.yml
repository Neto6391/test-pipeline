name: Develop Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Load cached Poetry installation
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install Poetry and dependencies
      run: |
        if [ ! -d ".venv" ]; then
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install --no-interaction --no-root
        fi
      env:
        POETRY_VIRTUALENVS_PATH: ./.venv

    - name: Cache .venv
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Upload .venv as artifact
      uses: actions/upload-artifact@v3
      with:
        name: venv
        path: .venv

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4

    - name: Download .venv
      uses: actions/download-artifact@v3
      with:
        name: venv

    - name: Run linter
      run: .venv/bin/poetry run flake8 .

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - uses: actions/checkout@v4

    - name: Download .venv
      uses: actions/download-artifact@v3
      with:
        name: venv

    - name: Run tests
      run: .venv/bin/poetry run pytest .

  deploy:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Deploy
      if: success()
      run: echo "Deploying the application..."
