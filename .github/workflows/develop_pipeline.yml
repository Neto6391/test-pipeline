name: Develop Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
env:
  PYTHON_VERSION: '3.10'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Load cached Poetry installation
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv

          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}
        
      - name: Install Poetry
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true
      

      - name: install depedencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
            pipx install poetry
            poetry install --no-interaction --no-root

      - name: Run tests
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry run flake8 .

      - name: run tests if was cached
        if: steps.cached-poetry-dependencies.outputs.cache-hit == 'true'
        run: |
          source .venv/bin/activate
          poetry run flake8 .
          



  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python
  #       id: setup-python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}
      
  #     - name: Load cached Poetry installation
  #       id: cached-poetry-dependencies
  #       uses: actions/cache@v4
  #       with:
  #         path: .venv
  #         key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/pyproject.toml') }}
          
  #     - name: Install Poetry
  #       if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  #       uses: snok/install-poetry@v1
  #       with:
  #         version: latest
  #         virtualenvs-create: true
  #         virtualenvs-in-project: true
  #         virtualenvs-path: .venv
  #         installer-parallel: true

  #     - name: install depedencies
  #       if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  #       run: |
  #           source .venv/bin/activate
  #           pipx install poetry
  #           poetry install --no-interaction --no-root
        
  #     - name: Run tests
  #       run: |
  #           source .venv/bin/activate
  #           poetry run pytest .
  deploy:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
    - name: Deploy
      if: success()
      run: |
        echo "Deploying the application..."